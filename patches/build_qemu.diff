--- qemu_mode/build_qemu_support.sh
+++ qemu_mode/build_qemu_support.sh
@@ -22,6 +22,10 @@
 # will be written to ../afl-qemu-trace.
 #
 
+if [ $# -lt 1 ]; then
+    echo "usage: $0 <arches>" >&2
+    exit 1
+fi
 
 VERSION="2.10.0"
 QEMU_URL="http://download.qemu-project.org/qemu-${VERSION}.tar.xz"
@@ -115,15 +119,11 @@ echo "[*] Uncompressing archive (this will take a while)..."
 rm -rf "qemu-${VERSION}" || exit 1
 tar xf "$ARCHIVE" || exit 1
 
+
 echo "[+] Unpacking successful."
 
 echo "[*] Configuring QEMU for $CPU_TARGET..."
 
-ORIG_CPU_TARGET="$CPU_TARGET"
-
-test "$CPU_TARGET" = "" && CPU_TARGET="`uname -m`"
-test "$CPU_TARGET" = "i686" && CPU_TARGET="i386"
-
 cd qemu-$VERSION || exit 1
 
 echo "[*] Applying patches..."
@@ -132,26 +132,61 @@ patch -p1 <../patches/elfload.diff || exit 1
 patch -p1 <../patches/cpu-exec.diff || exit 1
 patch -p1 <../patches/syscall.diff || exit 1
 
+# some patches are needed for Ubuntu 20.04 but not for Ubuntu 18.04
+# (I have not tested other distributions)
+apply_patch_18_04=0
+apply_patches_above_18_04=0
+if [ `lsb_release -a 2>/dev/null | grep 'Distributor ID' | awk '{print $3}'` = Ubuntu ]; then
+    if [ `lsb_release -a 2>/dev/null | grep 'Release' | awk '{print $2}' | tr -d .` -ge 1804 ]; then
+        apply_patch_18_04=1
+    fi
+    if [ `lsb_release -a 2>/dev/null | grep 'Release' | awk '{print $2}' | tr -d .` -gt 1804 ]; then
+        apply_patches_above_18_04=1
+    fi
+else
+    apply_patch_18_04=1
+    apply_patches_above_18_04=1
+fi
+
+if [ $apply_patch_18_04 -eq 1 ]; then
+    patch -p1 <../patches/memfd.diff
+fi
+if [ $apply_patches_above_18_04 -eq 1 ]; then
+    patch -p1 <../patches/gettid.diff
+    patch -p1 <../patches/syscall_sockios.diff
+    patch -p1 <../patches/stime.diff
+fi
+
 echo "[+] Patching done."
 
-# --enable-pie seems to give a couple of exec's a second performance
-# improvement, much to my surprise. Not sure how universal this is..
+CPU_TARGETS=$@
 
-CFLAGS="-O3 -ggdb" ./configure --disable-system \
-  --enable-linux-user --disable-gtk --disable-sdl --disable-vnc \
-  --target-list="${CPU_TARGET}-linux-user" --enable-pie --enable-kvm || exit 1
+for CPU_TARGET in $CPU_TARGETS; do
 
-echo "[+] Configuration complete."
+    # --enable-pie seems to give a couple of exec's a second performance
+    # improvement, much to my surprise. Not sure how universal this is..
 
-echo "[*] Attempting to build QEMU (fingers crossed!)..."
+    CFLAGS="-O3 -ggdb" ./configure --disable-system --python=`which python2` \
+      --enable-linux-user --disable-gtk --disable-sdl --disable-vnc \
+      --target-list="${CPU_TARGET}-linux-user" --enable-pie --enable-kvm || exit 1
 
-make || exit 1
+    echo "[+] Configuration complete."
 
-echo "[+] Build process successful!"
+    echo "[*] Attempting to build QEMU (fingers crossed!)..."
 
-echo "[*] Copying binary..."
+    make || exit 1
 
-cp -f "${CPU_TARGET}-linux-user/qemu-${CPU_TARGET}" "../../afl-qemu-trace" || exit 1
+    echo "[+] Build process successful!"
+
+    echo "[*] Copying binary..."
+
+    cp -f "${CPU_TARGET}-linux-user/qemu-${CPU_TARGET}" "../../afl-qemu-trace" || exit 1
+
+    mkdir -p ../../tracers/$CPU_TARGET
+
+    cp -f "${CPU_TARGET}-linux-user/qemu-${CPU_TARGET}" "../../tracers/${CPU_TARGET}/afl-qemu-trace" || exit 1
+
+done
 
 cd ..
 ls -l ../afl-qemu-trace || exit 1
@@ -166,29 +201,29 @@ if [ "$ORIG_CPU_TARGET" = "" ]; then
 
   make >/dev/null || exit 1
 
-  gcc test-instr.c -o test-instr || exit 1
-
-  unset AFL_INST_RATIO
-
-  echo 0 | ./afl-showmap -m none -Q -q -o .test-instr0 ./test-instr || exit 1
-  echo 1 | ./afl-showmap -m none -Q -q -o .test-instr1 ./test-instr || exit 1
-
-  rm -f test-instr
-
-  cmp -s .test-instr0 .test-instr1
-  DR="$?"
-
-  rm -f .test-instr0 .test-instr1
-
-  if [ "$DR" = "0" ]; then
-
-    echo "[-] Error: afl-qemu-trace instrumentation doesn't seem to work!"
-    exit 1
-
-  fi
-
-  echo "[+] Instrumentation tests passed. "
-  echo "[+] All set, you can now use the -Q mode in afl-fuzz!"
+#  gcc test-instr.c -o test-instr || exit 1
+#
+#  unset AFL_INST_RATIO
+#
+#  echo 0 | ./afl-showmap -m none -Q -q -o .test-instr0 ./test-instr || exit 1
+#  echo 1 | ./afl-showmap -m none -Q -q -o .test-instr1 ./test-instr || exit 1
+#
+#  rm -f test-instr
+#
+#  cmp -s .test-instr0 .test-instr1
+#  DR="$?"
+#
+#  rm -f .test-instr0 .test-instr1
+#
+#  if [ "$DR" = "0" ]; then
+#
+#    echo "[-] Error: afl-qemu-trace instrumentation doesn't seem to work!"
+#    exit 1
+#
+#  fi
+#
+#  echo "[+] Instrumentation tests passed. "
+#  echo "[+] All set, you can now use the -Q mode in afl-fuzz!"
 
 else
 
